{"version":3,"sources":["components/Encryption.js","components/EncryptCreateKeys.js","App.js","serviceWorker.js","index.js"],"names":["openpgp","require","Encryption","props","state","disabled","encryptedData","decryptedData","input","key","this","setState","type","id","onPaste","handleChange","bind","onChange","className","placeholder","aria-describedby","initWorker","path","unArmoredKeyNoSpace","substr","replace","unArmoredTextNoSpace","trim","armoredMsg","privateKeyArmored","readArmored","keys","privateKey","message","privateKeys","decrypt","decrypted","data","publicKeyArmored","fromText","publicKeys","encrypt","encrypted","e","target","value","console","log","handleClick","encryptData","decryptData","split","map","i","htmlFor","disabledInput","onClick","handleGameClik","showResults","rows","textAreaClick","React","Component","EncryptCreateKeys","pubKey","privKey","userIds","name","email","curve","passphrase","revocationCertificate","data-toggle","href","role","aria-expanded","aria-controls","createKeyPair","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f3f206a1.chunk.js","sourcesContent":["import React from \"react\";\r\nconst openpgp = require('openpgp'); // use as CommonJS, AMD, ES6 module or via window.openpgp\r\n\r\nclass Encryption extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false,\r\n            encryptedData:null,\r\n            decryptedData:null,\r\n            input:null,\r\n            key:null};\r\n    }\r\n    handleGameClik() {\r\n        this.setState( {disabled: !this.state.disabled} )\r\n    }\r\n    disabledInput(){\r\n        if(this.state.disabled){\r\n            return (<input type=\"text\" id=\"disabledTextInput\" onPaste={this.handleChange.bind(this) } onChange={ this.handleChange.bind(this) } className=\"form-control\" placeholder=\"Private/Public Key\" aria-describedby=\"button-addon4\" disabled/>)\r\n        }else{\r\n            return (<input type=\"text\" id=\"disabledTextInput\"  onPaste={this.handleChange.bind(this) } onChange={ this.handleChange.bind(this) } className=\"form-control\" placeholder=\"Private/Public Key\" aria-describedby=\"button-addon4\"/>)\r\n        }\r\n    }\r\n    async decryptData(){\r\n            await openpgp.initWorker({ path: 'openpgp.worker.js' }); // set the relative web worker path\r\n\r\n        const unArmoredKeyNoSpace = this.state.key.substr(96,743).replace(/\\s+/g, '\\n');\r\n        const unArmoredTextNoSpace = this.state.encryptedData.trim().substr(86);\r\n\r\n            // put keys in backtick (``) to avoid errors caused by spaces or tabs\r\n            //const privateKeyArmored = this.state.key.trim();\r\n\r\n        const armoredKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----\r\nVersion: OpenPGP.js v4.10.7\r\nComment: https://openpgpjs.org\r\n`+'\\n'+unArmoredKeyNoSpace+'\\n'+'-----END PGP PUBLIC KEY BLOCK-----';\r\n\r\n        const armoredMsg = `-----BEGIN PGP MESSAGE-----\r\nVersion: OpenPGP.js v4.10.7\r\nComment: https://openpgpjs.org`+'\\n'+unArmoredTextNoSpace;\r\n\r\n            const privateKeyArmored = armoredKey;\r\n\r\n            // encrypted private key\r\n            const passphrase = \"\"; // what the private key is encrypted with\r\n\r\n            const { keys: [privateKey] } = await openpgp.key.readArmored(privateKeyArmored);\r\n            //await privateKey.decrypt(passphrase);\r\n\r\n            const { data: decrypted } = await openpgp.decrypt({\r\n                message: await openpgp.message.readArmored(armoredMsg),              // parse armored message\r\n                privateKeys: [privateKey]                                           // for decryption\r\n            });\r\n        this.setState({decryptedData:decrypted});\r\n        this.setState({input:\"\",\r\n                            encryptedData:\"\"});\r\n    }\r\n    async encryptData(){\r\n        await openpgp.initWorker({ path: 'openpgp.worker.js' }); // set the relative web worker path\r\n\r\n\r\n        const unArmoredKeyNoSpace = this.state.key.substr(95,641).replace(/\\s+/g, '\\n');\r\n\r\n        const armoredKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----\r\nVersion: OpenPGP.js v4.10.7\r\nComment: https://openpgpjs.org\r\n`+unArmoredKeyNoSpace+'\\n'+'-----END PGP PUBLIC KEY BLOCK-----';\r\n\r\n        const publicKeyArmored = armoredKey;\r\n\r\n        const passphrase = \"\"; // what the private key is encrypted with\r\n\r\n        const  encrypted  = await openpgp.encrypt({\r\n            message: openpgp.message.fromText(this.state.decryptedData.trim()),                 // input as Message object\r\n            publicKeys: (await openpgp.key.readArmored(publicKeyArmored)).keys[0] // for encryption\r\n        });\r\n        this.setState({encryptedData:encrypted.data});\r\n        this.setState({input:\"\",\r\n                            decryptedData:\"\"});\r\n    }\r\n    handleChange(e) {\r\n        if(e.target.id===\"dataTextField\"&&e.target.value!==\"\"){\r\n            this.setState({ input: e.target.value });\r\n        }else if(e.target.id===\"disabledTextInput\"&&e.target.value!==\"\"){\r\n            this.setState({key:e.target.value})\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n    }\r\n    handleClick(e) {\r\n\r\n        if(e.target.value===\"Decrypt\"){\r\n            this.setState({encryptedData:this.state.input})\r\n        }else if(e.target.value===\"Encrypt\"){\r\n            this.setState({decryptedData:this.state.input})\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n    }\r\n    textAreaClick(e){\r\n        if(e.target.value===\"Encrypt\"&&this.state.input!==null){\r\n            this.handleClick(e);\r\n            this.encryptData();\r\n        }else if(e.target.value===\"Decrypt\"&&this.state.input!==null){\r\n            this.handleClick(e);\r\n            this.decryptData();\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n\r\n    }\r\n    showResults(){\r\n        if(this.state.input===\"\"){\r\n            if(this.state.encryptedData===\"\"){\r\n                return (<div className=\"h6\"><small>{this.state.decryptedData.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>);\r\n            }else if(this.state.decryptedData===\"\"){\r\n                return (<div className=\"h6\"><small>{this.state.encryptedData.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <label className={(this.state.disabled?\"\":\"invisible\")} htmlFor=\"disabledTextInput\">Saved Private/Public Key!</label>\r\n                <div className=\"input-group pb-5\">\r\n                {this.disabledInput()}\r\n                <div className=\"input-group-append\" id=\"button-addon4\">\r\n                    <button className=\"btn btn-outline-secondary\" onClick={this.handleGameClik.bind(this)} type=\"button\">Save</button>\r\n                </div>\r\n            </div>\r\n                {this.showResults()}\r\n                <div className=\"form-group\">\r\n                    <textarea className=\"form-control\" onChange={ this.handleChange.bind(this) } placeholder=\"Message To Encode/Decode\"  id=\"dataTextField\" rows=\"3\"></textarea>\r\n                    <div className=\"p-3\">\r\n                        <input className=\"btn btn-outline-secondary\" onClick={this.textAreaClick.bind(this)} type=\"submit\" value=\"Encrypt\"></input>\r\n                        <input className=\"btn btn-outline-secondary\" onClick={this.textAreaClick.bind(this)} type=\"submit\" value=\"Decrypt\"></input>\r\n                    </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Encryption;\r\n/*\r\n\r\n-----BEGIN PGP MESSAGE-----\r\nVersion: OpenPGP.js v4.10.7\r\nComment: https://openpgpjs.org\r\n\r\nwX4D4ejbexXH7XISAgMEmzTIiwE3XmtzyYTJLmueInH2Ymvw6iwwPM85hD6h\r\nqZpzPmkzCV9gmP/5GTtB59aITZUn8THxeSWBgqHaNHD8tTBqwatg8rZzFUgY\r\nobyUGScR2jFXzKQqSjt8AAn7lzDzHJsWGxXMVCxMV9B4E8JPYMXSPAFIeQ+H\r\njHmDkCrGjGKEFEw5POlvFA0DlCPEanR04wKW7xnYzjcGl4TUFKybcQcnb+vo\r\nNF+Ir0oSYO/qBA==\r\n=55NA\r\n-----END PGP MESSAGE-----\r\n\r\n\r\n\r\n\r\n */","import React from \"react\";\r\nimport * as openpgp from \"openpgp\";\r\nimport './EncryptCreateKeys.css';\r\n\r\n\r\nclass EncryptCreateKeys extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: true,\r\n            pubKey:\"\",\r\n            privKey:\"\"};\r\n    }\r\n    handleGameClik() {\r\n        this.setState( {disabled: !this.state.disabled} )\r\n    }\r\n    async createKeyPair(){\r\n        if(this.state.pubKey===\"\"){\r\n\r\n            var { privateKeyArmored, publicKeyArmored, revocationCertificate } = await openpgp.generateKey({\r\n                userIds: [{ name: 'Jon Smith', email: 'jon@example.com' }], // you can pass multiple user IDs\r\n                curve:'p256',\r\n                passphrase: \"\"           // protects the private key\r\n            });\r\n\r\n            this.setState({privKey:privateKeyArmored});\r\n            this.setState({pubKey:publicKeyArmored});\r\n\r\n            return {privKey:privateKeyArmored,pubKey:publicKeyArmored}\r\n        }else{\r\n            this.setState({pubKey:\"\"});\r\n            this.setState({privKey:\"\"});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container my-5\">\r\n                <p>\r\n                    <a className=\"btn btn-dark\" data-toggle=\"collapse\" href=\"#multiCollapseExample1\" role=\"button\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample1\">Create Keys</a>\r\n                </p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"collapse\" id=\"multiCollapseExample1\">\r\n                            <div className=\"card card-body bg-dark\">\r\n\r\n                                <button onClick = {()=>{this.handleGameClik.bind(this);this.createKeyPair();}} data-toggle=\"collapse\" className=\"btn btn-secondary btn-sm\" type=\"button\" aria-expanded=\"false\" aria-controls=\"keysCollapse\" href=\"#keysCollapse\">Generate Keys</button>\r\n\r\n                                <a className={(this.state.privKey===\"\"?\"invisible\":\"\")} >Private Key (Keep Safe!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\" >\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"h6\"><small>{this.state.privKey.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>\r\n                                </div>\r\n\r\n                                <a className={(this.state.privKey===\"\"?\"invisible\":\"\")} >Public Key (Can Share!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\">\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"h6\"><small>{this.state.pubKey.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EncryptCreateKeys;","import React from 'react';\r\nimport './App.css';\r\nimport Encryption from \"./components/Encryption\";\r\nimport EncryptCreateKeys from \"./components/EncryptCreateKeys\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"App\">\r\n                <div className=\"content container-fluid pt-5 text-center App-header\">\r\n                    <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                        <a className=\"navbar-brand\" href=\"/\">MyVault</a>\r\n                    </nav>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <p>Encryption</p>\r\n                            <Encryption/>\r\n                            <EncryptCreateKeys />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nrequire('bootstrap');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}