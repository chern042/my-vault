{"version":3,"sources":["components/Encryption.js","components/EncryptCreateKeys.js","App.js","serviceWorker.js","index.js"],"names":["Encryption","props","state","disabled","this","setState","className","type","placeholder","aria-describedby","id","onClick","handleGameClik","bind","React","Component","EncryptCreateKeys","pubKey","privKey","openpgp","userIds","name","email","rsaBits","passphrase","privateKeyArmored","publicKeyArmored","revocationCertificate","data-toggle","href","role","aria-expanded","aria-controls","createKeyPair","App","Boolean","window","location","hostname","match","require","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a202df7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Encryption extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { disabled: false }\r\n    }\r\n    handleGameClik() {\r\n        this.setState( {disabled: !this.state.disabled} )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Private Key\" aria-describedby=\"button-addon4\" disabled={(this.state.disabled)?\"disabled\":\"\"}/>\r\n                <div className=\"input-group-append\" id=\"button-addon4\">\r\n                    <button onClick = {this.handleGameClik.bind(this)} className=\"btn btn-outline-secondary\" type=\"button\">Button</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Encryption;\r\n","import React from \"react\";\r\nimport * as openpgp from \"openpgp\";\r\nimport './EncryptCreateKeys.css';\r\n\r\n\r\nclass EncryptCreateKeys extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: true,\r\n            pubKey:null,\r\n            privKey:null};\r\n    }\r\n    handleGameClik() {\r\n        this.setState( {disabled: !this.state.disabled} )\r\n    }\r\n    async createKeyPair(){\r\n\r\n        var { privateKeyArmored, publicKeyArmored, revocationCertificate } = await openpgp.generateKey({\r\n            userIds: [{ name: 'Jon Smith', email: 'jon@example.com' }], // you can pass multiple user IDs\r\n            rsaBits:4096,\r\n            passphrase: 'super long and hard to guess secret'           // protects the private key\r\n        });\r\n\r\n        this.setState({privKey:privateKeyArmored});\r\n        this.setState({pubKey:publicKeyArmored});\r\n\r\n        return {privKey:privateKeyArmored,pubKey:publicKeyArmored}\r\n    }\r\n    //showKeys(){\r\n     //   if\r\n   // }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container my-5\">\r\n                <p>\r\n                    <a className=\"btn btn-dark\" data-toggle=\"collapse\" href=\"#multiCollapseExample1\" role=\"button\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample1\">Create Keys</a>\r\n                </p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"collapse\" id=\"multiCollapseExample1\">\r\n                            <div className=\"card card-body bg-dark\">\r\n\r\n                                <p>Create keys:</p>\r\n                                <button onClick = {()=>{this.handleGameClik.bind(this);this.createKeyPair();}} data-toggle=\"collapse\" className=\"btn btn-secondary btn-sm\" type=\"button\" aria-expanded=\"false\" aria-controls=\"keysCollapse\" href=\"#keysCollapse\">Generate Keys</button>\r\n\r\n                                <a className={(this.state.privKey==null?\"invisible\":\"\")} >Private Key (Keep Safe!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\" >\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <p className=\"h6\"><small>{this.state.privKey}</small></p>\r\n                                </div>\r\n\r\n                                <a className={(this.state.privKey==null?\"invisible\":\"\")} >Public Key (Can Share!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\">\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <p className=\"h6\"><small>{this.state.pubKey}</small></p>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EncryptCreateKeys;","import React from 'react';\r\nimport './App.css';\r\nimport Encryption from \"./components/Encryption\";\r\nimport EncryptCreateKeys from \"./components/EncryptCreateKeys\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"App\">\r\n                <div className=\"content container-fluid pt-5 text-center App-header\">\r\n                    <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                        <a className=\"navbar-brand\" href=\"/\">MyVault</a>\r\n                    </nav>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\">\r\n                            <p>Encryption</p>\r\n                            1/3\r\n                            <Encryption/>\r\n                            <EncryptCreateKeys />\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p>Authorize</p>\r\n                            2/3\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <p>Chat</p>\r\n                            3/3\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nrequire('bootstrap');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}