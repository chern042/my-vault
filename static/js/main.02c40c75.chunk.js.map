{"version":3,"sources":["components/Encryption.js","components/EncryptCreateKeys.js","App.js","serviceWorker.js","index.js"],"names":["openpgp","require","$","window","Encryption","props","state","pubDisabled","privDisabled","encryptedData","decryptedData","input","key","console","log","this","setState","removeClass","hide","addClass","show","className","type","onPaste","handleChange","bind","onChange","placeholder","aria-describedby","disabled","id","onClick","handlePubClick","handlePrivClick","initWorker","path","unArmoredKeyNoSpace","substr","replace","unArmoredTextNoSpace","trim","armoredMsg","privateKeyArmored","readArmored","keys","privateKey","message","privateKeys","decrypt","decrypted","data","publicKeyArmored","fromText","publicKeys","encrypt","encrypted","toString","e","target","value","handleClick","encryptData","decryptData","split","map","i","role","disabledPubInput","disabledPrivInput","showResults","rows","textAreaClick","React","Component","EncryptCreateKeys","pubKey","privKey","userIds","name","email","curve","passphrase","revocationCertificate","data-toggle","href","aria-expanded","aria-controls","handleGameClik","createKeyPair","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.02c40c75.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Encryption.css';\r\nconst openpgp = require('openpgp'); // use as CommonJS, AMD, ES6 module or via window.openpgp\r\nconst $ = window.$;\r\n\r\nclass Encryption extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pubDisabled:false,\r\n            privDisabled: false,\r\n            encryptedData:null,\r\n            decryptedData:null,\r\n            input:null,\r\n            key:null};\r\n        //$(\"#alert\").alert('open');\r\n        console.log('close????');\r\n    }\r\n    handlePubClick() {\r\n        this.setState( {pubDisabled: !this.state.pubDisabled});\r\n        if(!this.state.pubDisabled){\r\n            $('#alertPub').addClass('fade-in')\r\n            $('#alertPub').show();\r\n        }else{\r\n            $('#alertPub').removeClass('fade-in')\r\n            $('#alertPub').hide();\r\n        }\r\n        console.log('whyy')\r\n    }\r\n    handlePrivClick() {\r\n        this.setState( {privDisabled: !this.state.privDisabled} )\r\n        if(!this.state.privDisabled){\r\n            $('#alertPriv').addClass('fade-in')\r\n            $('#alertPriv').show();\r\n        }else{\r\n            $('#alertPriv').removeClass('fade-in')\r\n            $('#alertPriv').hide();\r\n        }\r\n    }\r\n    disabledPubInput(){\r\n        if(this.state.pubDisabled){\r\n            return (\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\"\r\n                               onPaste={this.handleChange.bind(this) }\r\n                               onChange={ this.handleChange.bind(this) }\r\n                               className=\"form-control\"\r\n                               placeholder=\"Public Key\"\r\n                               aria-describedby=\"button-addon4\" disabled/>\r\n                        <div className=\"input-group-append\" id=\"button-addon4\">\r\n                            <button className=\"btn btn-outline-secondary\"  onClick={this.handlePubClick.bind(this)}>Save</button>\r\n                        </div>\r\n                    </div>\r\n             )\r\n        }else{\r\n            return (\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\"\r\n                               onPaste={this.handleChange.bind(this) }\r\n                               onChange={ this.handleChange.bind(this) }\r\n                               className=\"form-control\"\r\n                               placeholder=\"Public Key\"\r\n                               aria-describedby=\"button-addon4\"/>\r\n                        <div className=\"input-group-append\" id=\"button-addon4\">\r\n                            <button className=\"btn btn-outline-secondary\"  onClick={this.handlePubClick.bind(this)} type=\"button\">Save</button>\r\n                        </div>\r\n                    </div>\r\n            )\r\n        }\r\n    }\r\n    disabledPrivInput(){\r\n        if(this.state.privDisabled){\r\n            return(\r\n                <div className=\"input-group mb-5\">\r\n\r\n                    <input type=\"text\"\r\n                           id=\"disabledTextInput\"\r\n                           onPaste={this.handleChange.bind(this) }\r\n                           onChange={this.handleChange.bind(this) }\r\n                           className=\"form-control\"\r\n                           placeholder=\"Private Key\"\r\n                           aria-describedby=\"button-addon5\" disabled/>\r\n                    <div className=\"input-group-append\" id=\"button-addon5\">\r\n                        <button className=\"btn btn-outline-secondary\"  onClick={this.handlePrivClick.bind(this)} type=\"button\">Save</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"input-group mb-5\">\r\n                    <input type=\"text\"\r\n                           id=\"disabledTextInput\"\r\n                           onPaste={this.handleChange.bind(this) }\r\n                           onChange={this.handleChange.bind(this) }\r\n                           className=\"form-control\"\r\n                           placeholder=\"Private Key\"\r\n                           aria-describedby=\"button-addon5\"/>\r\n                    <div className=\"input-group-append\" id=\"button-addon5\">\r\n                        <button className=\"btn btn-outline-secondary\"  onClick={this.handlePrivClick.bind(this)} type=\"button\">Save</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n    async decryptData(){\r\n        try {\r\n            await openpgp.initWorker({path: 'openpgp.worker.js'}); // set the relative web worker path\r\n\r\n            const unArmoredKeyNoSpace = this.state.key.substr(96, 743).replace(/\\s+/g, '\\n');\r\n            const unArmoredTextNoSpace = this.state.encryptedData.trim().substr(86);\r\n\r\n            // put keys in backtick (``) to avoid errors caused by spaces or tabs\r\n            //const privateKeyArmored = this.state.key.trim();\r\n\r\n            const armoredKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n    Version: OpenPGP.js v4.10.7\r\n    Comment: https://openpgpjs.org\r\n    ` + '\\n' + unArmoredKeyNoSpace + '\\n' + '-----END PGP PUBLIC KEY BLOCK-----';\r\n\r\n            const armoredMsg = `-----BEGIN PGP MESSAGE-----\r\n    Version: OpenPGP.js v4.10.7\r\n    Comment: https://openpgpjs.org` + '\\n' + unArmoredTextNoSpace;\r\n\r\n            const privateKeyArmored = armoredKey;\r\n\r\n            // encrypted private key\r\n            const passphrase = \"\"; // what the private key is encrypted with\r\n\r\n            const {keys: [privateKey]} = await openpgp.key.readArmored(privateKeyArmored);\r\n            //await privateKey.decrypt(passphrase);\r\n\r\n            const {data: decrypted} = await openpgp.decrypt({\r\n                message: await openpgp.message.readArmored(armoredMsg),              // parse armored message\r\n                privateKeys: [privateKey]                                           // for decryption\r\n            });\r\n            this.setState({decryptedData: decrypted});\r\n            this.setState({\r\n                input: \"\",\r\n                encryptedData: \"\"\r\n            });\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n    async encryptData(){\r\n        try {\r\n\r\n\r\n            await openpgp.initWorker({path: 'openpgp.worker.js'}); // set the relative web worker path\r\n\r\n\r\n            const unArmoredKeyNoSpace = this.state.key.substr(95, 641).replace(/\\s+/g, '\\n');\r\n\r\n            const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n    Version: OpenPGP.js v4.10.7\r\n    Comment: https://openpgpjs.org\r\n    ` + unArmoredKeyNoSpace + '\\n' + '-----END PGP PUBLIC KEY BLOCK-----';\r\n\r\n            const passphrase = \"\"; // what the private key is encrypted with\r\n\r\n            const encrypted = await openpgp.encrypt({\r\n                message: openpgp.message.fromText(this.state.decryptedData.trim()),                 // input as Message object\r\n                publicKeys: (await openpgp.key.readArmored(publicKeyArmored)).keys[0] // for encryption\r\n            });\r\n            this.setState({encryptedData: encrypted.data});\r\n            this.setState({\r\n                input: \"\",\r\n                decryptedData: \"\"\r\n            });\r\n        }catch(e){\r\n            console.log(e.toString())\r\n        }\r\n    }\r\n    handleChange(e) {\r\n        if(e.target.id===\"dataTextField\"&&e.target.value!==\"\"){\r\n            this.setState({ input: e.target.value });\r\n        }else if(e.target.id===\"disabledTextInput\"&&e.target.value!==\"\"){\r\n            this.setState({key:e.target.value})\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n    }\r\n    handleClick(e) {\r\n\r\n        if(e.target.value===\"Decrypt\"){\r\n            this.setState({encryptedData:this.state.input})\r\n        }else if(e.target.value===\"Encrypt\"){\r\n            this.setState({decryptedData:this.state.input})\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n    }\r\n    textAreaClick(e){\r\n        if(e.target.value===\"Encrypt\"&&this.state.input!==null&&this.state.key!==null){\r\n            this.handleClick(e);\r\n            this.encryptData();\r\n        }else if(e.target.value===\"Decrypt\"&&this.state.input!==null&&this.state.key!==null){\r\n            this.handleClick(e);\r\n            this.decryptData();\r\n        }else{\r\n            console.log('do nothing')\r\n        }\r\n\r\n    }\r\n    showResults(){\r\n        if(this.state.input===\"\"){\r\n            if(this.state.encryptedData===\"\"){\r\n                return (<div className=\"h6\"><small>{this.state.decryptedData.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>);\r\n            }else if(this.state.decryptedData===\"\"){\r\n                return (<div className=\"h6\"><small>{this.state.encryptedData.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"alerts m-0 h-25\">\r\n\r\n                    <div className={\"p-1 alert alert-success shadow rounded\"} id=\"alertPub\" role=\"alert\">\r\n                        Saved Public Key!\r\n                        <a className=\"close m-1\" onClick={()=>{$('#alertPub').hide()}}>×</a>\r\n                    </div>\r\n\r\n                    <div className={\"p-1 alert alert-success shadow rounded\"} id=\"alertPriv\" role=\"alert\">\r\n                        Saved Private Key!\r\n                        <a className=\"close m-1\" onClick={()=>{$('#alertPriv').hide()}}>×</a>\r\n                    </div>\r\n                </div>\r\n                {this.disabledPubInput()}\r\n                {this.disabledPrivInput()}\r\n\r\n                {this.showResults()}\r\n                <div className=\"form-group\">\r\n                    <textarea className=\"form-control\" onChange={ this.handleChange.bind(this) } placeholder=\"Message To Encode/Decode\"  id=\"dataTextField\" rows=\"3\"></textarea>\r\n                    <div className=\"m-3\">\r\n                        <input className=\"btn btn-outline-secondary mx-2\" onClick={this.textAreaClick.bind(this)} type=\"submit\" value=\"Encrypt\"></input>\r\n                        <input className=\"btn btn-outline-secondary mx-2\" onClick={this.textAreaClick.bind(this)} type=\"submit\" value=\"Decrypt\"></input>\r\n                    </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Encryption;\r\n","import React from \"react\";\r\nimport * as openpgp from \"openpgp\";\r\nimport './EncryptCreateKeys.css';\r\n\r\n\r\nclass EncryptCreateKeys extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: true,\r\n            pubKey:\"\",\r\n            privKey:\"\"};\r\n    }\r\n    handleGameClik() {\r\n        this.setState( {disabled: !this.state.disabled} )\r\n    }\r\n    async createKeyPair(){\r\n        if(this.state.pubKey===\"\"){\r\n\r\n            var { privateKeyArmored, publicKeyArmored, revocationCertificate } = await openpgp.generateKey({\r\n                userIds: [{ name: 'Jon Smith', email: 'jon@example.com' }], // you can pass multiple user IDs\r\n                curve:'p256',\r\n                passphrase: \"\"           // protects the private key\r\n            });\r\n\r\n            this.setState({privKey:privateKeyArmored});\r\n            this.setState({pubKey:publicKeyArmored});\r\n\r\n            return {privKey:privateKeyArmored,pubKey:publicKeyArmored}\r\n        }else{\r\n            this.setState({pubKey:\"\"});\r\n            this.setState({privKey:\"\"});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container my-5\">\r\n                <p>\r\n                    <a className=\"btn btn-dark\" data-toggle=\"collapse\" href=\"#multiCollapseExample1\" role=\"button\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample1\">Create Keys</a>\r\n                </p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"collapse\" id=\"multiCollapseExample1\">\r\n                            <div className=\"card card-body bg-dark\">\r\n\r\n                                <a role=\"button\" onClick = {()=>{this.handleGameClik.bind(this);this.createKeyPair();}} data-toggle=\"collapse\" className=\"btn btn-secondary btn-sm\" aria-expanded=\"false\" aria-controls=\"keysCollapse\" href=\"#keysCollapse\">Generate Keys</a>\r\n\r\n                                <a className={(this.state.privKey===\"\"?\"invisible\":\"\")} >Private Key (Keep Safe!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\" >\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"h6\"><small>{this.state.privKey.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>\r\n                                </div>\r\n\r\n                                <a className={(this.state.privKey===\"\"?\"invisible\":\"\")} >Public Key (Can Share!):</a>\r\n                                <div className=\"my-3 mx-3 collapse shadow\" id=\"keysCollapse\">\r\n\r\n                                    <div className={(this.state.privKey==null?\"\":\"d-none\")} >\r\n                                        <div className=\"spinner-border m-5\" role=\"status\">\r\n                                            <span className=\"sr-only\">Loading...</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"h6\"><small>{this.state.pubKey.split(\"\\n\").map((i,key) => {return <div key={key}>{i}</div>;})}</small></div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EncryptCreateKeys;","import React from 'react';\r\nimport './App.css';\r\nimport Encryption from \"./components/Encryption\";\r\nimport EncryptCreateKeys from \"./components/EncryptCreateKeys\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"App\">\r\n                <div className=\"content container-fluid pt-5 text-center App-header\">\r\n                    <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                        <a className=\"navbar-brand\" href=\"/\">MyVault</a>\r\n                    </nav>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h1>MyVault PGP</h1>\r\n                            <Encryption/>\r\n                            <EncryptCreateKeys />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nrequire('bootstrap');\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}